# -*- coding: utf-8 -*-
"""
Created on Mon Apr 15 16:12:02 2024

@author: LK
"""

# IMPORT LIBRARIES

import MetaTrader5 as mt5
import datetime
import pandas as pd
import pytz
from time import sleep


# curr1 = 'GBPJPY'
curr1 = 'GBPUSD'
close_case = 0

# LOGIN TO MT5
account = 51610727
mt5.initialize("C:/Program Files/MetaTrader 5/terminal64.exe")
authorized=mt5.login(account, password="$ch9to$aJH", server = "mt5-demo.icmarkets.com")

if authorized:
    print("Connected: Connecting to MT5 Client")
else:
    print("Failed to connect at account #{}, error code: {}"
          .format(account, mt5.last_error()))
   
# establish connection to MetaTrader 5 terminal
if not mt5.initialize():
    print("initialize() failed, error code =",mt5.last_error())
    mt5.shutdown()
    
tz = pytz.timezone("Europe/London")
tz2 = pytz.timezone("Etc/UTC")
mt5_now = datetime.datetime.now(tz2)


# ALL FUNCTIONS
def get_rates(curr_pair, rate_type=1):
    
    # point = mt5.symbol_info(curr_pair).point
    
    if rate_type == 2:
    # RATES FOR LAST 1000 BARS # OHLC
        # rates = mt5.copy_rates_from_pos(curr_pair, mt5.TIMEFRAME_M1, 0, 500)
        utc_to = datetime.datetime.fromtimestamp(mt5.symbol_info(curr_pair).time)
        utc_from = utc_to - datetime.timedelta(hours=9)
        rates = mt5.copy_rates_range(curr_pair, mt5.TIMEFRAME_H1, utc_from, utc_to)
        rates_frame = pd.DataFrame(rates)
        # rates_frame['log_return'] = np.log(rates_frame['close']).diff()
        
    return rates_frame

def make_order(curr_pair, request, SL1, TP1, SL2, TP2, high, low, time_diff):
        symbol = curr_pair
        lot = 3.0

        deviation = 20
        symbol_info = mt5.symbol_info(symbol)
        
        if symbol_info is None:
            print(symbol, "not found, can not call order_check()")
            mt5.shutdown()
            quit()
         
        # if the symbol is unavailable in MarketWatch, add it
        if not symbol_info.visible:
            print(symbol, "is not visible, trying to switch on")
            if not mt5.symbol_select(symbol,True):
                print("symbol_select({}}) failed, exit",symbol)
                mt5.shutdown()
                quit()
         
        B_request = {
            "action": mt5.TRADE_ACTION_PENDING,
            "symbol": symbol,
            "volume": lot,
            "type": mt5.ORDER_TYPE_BUY_STOP,
            "price": high, #price,
            "sl": SL1, # 0.0,#price - (120000 * point),
            "tp": TP1,#price + (120000 * point),
            "deviation": deviation,
            "magic": 234000,
            "comment": "python script open",
            "type_time": mt5.ORDER_TIME_SPECIFIED,
            "expiration": round(time_diff),
            "type_filling": mt5.ORDER_FILLING_RETURN,
        }
         
        S_request = {
            "action": mt5.TRADE_ACTION_PENDING,
            "symbol": symbol,
            "volume": lot,
            "type": mt5.ORDER_TYPE_SELL_STOP,
            "price": low, #price2,
            "sl": SL2,#price + (120000 * point),
            "tp": TP2,#price - (120000 * point),
            "deviation": deviation,
            "magic": 234000,
            "comment": "python script open",
            "type_time": mt5.ORDER_TIME_SPECIFIED,
            "expiration": round(time_diff),
            "type_filling": mt5.ORDER_FILLING_RETURN,
        }
        
        if request == 1:
            result = mt5.order_send(B_request)
        elif request == 2:
            result = mt5.order_send(S_request)
            
            
        return result

def close_pending_order(order):
    
    request1={
        "order": order.ticket,
        "action": mt5.TRADE_ACTION_REMOVE,   
        }
    print (mt5.order_check(request1))
    mt5.order_send(request1)
    
def close_position(position):
    
        tick = mt5.symbol_info_tick(position.symbol)
    
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "position": position.ticket,
            "symbol": position.symbol,
            "volume": position.volume,
            "type": mt5.ORDER_TYPE_BUY_STOP if position.type == mt5.ORDER_TYPE_SELL_STOP else mt5.ORDER_TYPE_SELL_STOP,
            "price": tick.ask if position.type == 1 else tick.bid,  
            "deviation": 20,
            "magic": 100,
            "comment": "python script close",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
    
        result = mt5.order_send(request)
        print("CLOSE TRADE DONE - WIDEN THE GAP")
        return result


london_now = datetime.datetime.now(tz)


while datetime.datetime.now(tz).hour >= 8 and datetime.datetime.now(tz).hour <= 18:
    london_now = datetime.datetime.now(tz)
    
    if datetime.datetime.now(tz).hour == 10:
        close_case = 10
    elif datetime.datetime.now(tz).hour == 17:
        close_case = 5
    elif len(mt5.positions_get()) >= 1:
        close_case = 1
    else:
        close_case = 0

# TO OPEN ORDER    
    if len(mt5.positions_get()) < 1 and datetime.datetime.now(tz).hour <= 9:
       rates_frame = get_rates(curr1, 2)
       rates_frame['time'] = pd.to_datetime(rates_frame['time'], unit='s')
       rates_frame['hrs'] = rates_frame['time'].dt.hour
       df = rates_frame
       df = df[(df['hrs'] >= 0) & (df['hrs'] <= 8)]
       high = df['high'].max()
       low = df['low'].min()
       SL1 = high - ((high - low)/2)
       TP1 = high + ((high - low)*2)
       SL2 = high + ((high - low)/2)
       TP2 = high - ((high - low)*2)
       
       target_time = datetime.datetime.now(tz).replace(hour=11, minute=00, second=0, microsecond=0)
       time_diff = datetime.datetime.timestamp(target_time)
       
       ord1 = make_order(curr1, 1, SL1, TP1, SL2, TP2, high, low, time_diff)
       ord2 = make_order(curr1, 2, SL1, TP1, SL2, TP2, high, low, time_diff)
   

# TO CLOSE ORDER

    # CLOSE ALL OPEN TRADES BY 5PM LONDON TIME
    if close_case == 5:
        positions = mt5.positions_get()
        for position in positions:
            close_result = close_position(position)
    
    # CLOSE PENDING ORDER ONCE ONE ORDER ACTIVATES OR 10AM HITS
    if close_case == 10 or 1:
        orders = mt5.orders_get()
        for order in orders:
            close_order = close_pending_order(order)

    print(london_now)
    sleep(2)
